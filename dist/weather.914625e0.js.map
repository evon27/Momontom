{"version":3,"sources":["weather.js"],"names":["weather","document","querySelector","COORDS","API_KEY","getWeather","lat","lng","fetch","then","resp","json","temperature","main","temp","place","name","innerHTML","saveCoords","coordsObj","localStorage","setItem","JSON","stringify","handleGeoSuccess","position","latitude","coords","longitude","handleGeoError","console","error","askForCoords","navigator","geolocation","getCurrentPosition","loadCoords","loadedCords","getItem","parsedCoords","parse","init"],"mappings":"AAAA,IAAMA,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAhB;AAEA,IAAMC,MAAM,GAAG,QAAf;AACA,IAAMC,OAAO,GAAG,kCAAhB;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC1BC,EAAAA,KAAK,+DACsDF,GADtD,kBACiEC,GADjE,oBAC8EH,OAD9E,mBAAL,CAEEK,IAFF,CAEO,UAAAC,IAAI,EAAI;AACX,WAAOA,IAAI,CAACC,IAAL,EAAP;AACH,GAJD,EAIGF,IAJH,CAIQ,UAAAE,IAAI,EAAI;AACZ,QAAMC,WAAW,GAAGD,IAAI,CAACE,IAAL,CAAUC,IAA9B;AACA,QAAMC,KAAK,GAAGJ,IAAI,CAACK,IAAnB;AACAhB,IAAAA,OAAO,CAACiB,SAAR,aAAuBL,WAAvB,mBAAwCG,KAAxC;AACH,GARD;AASH;;AAED,SAASG,UAAT,CAAoBC,SAApB,EAA+B;AAC3BC,EAAAA,YAAY,CAACC,OAAb,CAAqBlB,MAArB,EAA6BmB,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAA7B;AACH;;AAED,SAASK,gBAAT,CAA0BC,QAA1B,EAAoC;AAChC,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAAjC;AACA,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAlC;AACA,MAAMT,SAAS,GAAG;AACdO,IAAAA,QAAQ,EAAIA,QADE;AAEdE,IAAAA,SAAS,EAAGA;AAFE,GAAlB;AAIAV,EAAAA,UAAU,CAACC,SAAD,CAAV;AACAd,EAAAA,UAAU,CAACqB,QAAD,EAAWE,SAAX,CAAV;AACH;;AAED,SAASC,cAAT,GAA0B;AACtBC,EAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd;AACH;;AAED,SAASC,YAAT,GAAwB;AACpBC,EAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCX,gBAAzC,EAA2DK,cAA3D;AACH;;AAED,SAASO,UAAT,GAAsB;AAClB,MAAMC,WAAW,GAAGjB,YAAY,CAACkB,OAAb,CAAqBnC,MAArB,CAApB;;AACA,MAAGkC,WAAW,KAAK,IAAnB,EAAyB;AACrBL,IAAAA,YAAY;AACf,GAFD,MAEO;AACH,QAAMO,YAAY,GAAGjB,IAAI,CAACkB,KAAL,CAAWH,WAAX,CAArB;AACA,QAAM/B,GAAG,GAAGiC,YAAY,CAACb,QAAzB;AACA,QAAMnB,GAAG,GAAGgC,YAAY,CAACX,SAAzB;AACAvB,IAAAA,UAAU,CAACC,GAAD,EAAMC,GAAN,CAAV;AACH;AACJ;;AAED,SAASkC,IAAT,GAAgB;AACZL,EAAAA,UAAU;AACb;;AAEDK,IAAI","file":"weather.914625e0.js","sourceRoot":"..","sourcesContent":["const weather = document.querySelector(\".span-weather\");\r\n\r\nconst COORDS = 'coords';\r\nconst API_KEY = \"f767fe72dcecda7562e13f5dc89c4f3e\";\r\n\r\nfunction getWeather(lat, lng) {\r\n    fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${API_KEY}&units=metric`\r\n    ).then(resp => {\r\n        return resp.json();\r\n    }).then(json => {\r\n        const temperature = json.main.temp;\r\n        const place = json.name;\r\n        weather.innerHTML = `${temperature}°C ${place}`;\r\n    })\r\n}\r\n\r\nfunction saveCoords(coordsObj) {\r\n    localStorage.setItem(COORDS, JSON.stringify(coordsObj));\r\n}\r\n\r\nfunction handleGeoSuccess(position) {\r\n    const latitude = position.coords.latitude;\r\n    const longitude = position.coords.longitude;\r\n    const coordsObj = {\r\n        latitude:   latitude,\r\n        longitude:  longitude\r\n    };\r\n    saveCoords(coordsObj);\r\n    getWeather(latitude, longitude);\r\n}\r\n\r\nfunction handleGeoError() {\r\n    console.error(\"위치정보를 불러오지 못했습니다!\");\r\n}\r\n\r\nfunction askForCoords() {\r\n    navigator.geolocation.getCurrentPosition(handleGeoSuccess, handleGeoError);\r\n}\r\n\r\nfunction loadCoords() {\r\n    const loadedCords = localStorage.getItem(COORDS);\r\n    if(loadedCords === null) {\r\n        askForCoords();\r\n    } else {\r\n        const parsedCoords = JSON.parse(loadedCords);\r\n        const lat = parsedCoords.latitude;\r\n        const lng = parsedCoords.longitude;\r\n        getWeather(lat, lng);\r\n    }\r\n}\r\n\r\nfunction init() {\r\n    loadCoords();\r\n}\r\n\r\ninit();"]}